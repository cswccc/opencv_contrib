decoder/Mode.h:41:  static Mode TERMINATOR;
decoder/Mode.h:42:  static Mode NUMERIC;
decoder/Mode.h:43:  static Mode ALPHANUMERIC;
decoder/Mode.h:44:  static Mode STRUCTURED_APPEND;
decoder/Mode.h:45:  static Mode BYTE;
decoder/Mode.h:46:  static Mode ECI;
decoder/Mode.h:47:  static Mode KANJI;
decoder/Mode.h:48:  static Mode FNC1_FIRST_POSITION;
decoder/Mode.h:49:  static Mode FNC1_SECOND_POSITION;
decoder/Mode.h:50:  static Mode HANZI;
decoder/DataMask.h:34:  static std::vector<Ref<DataMask> > DATA_MASKS;
decoder/DecodedBitStreamParser.h:47:  static char const ALPHANUMERIC_CHARS[];
detector/FinderPatternFinder.h:56:  static int CENTER_QUORUM;
detector/FinderPatternFinder.h:57:  static int INTEGER_MATH_SHIFT;
detector/FinderPatternFinder.h:59:  static CrossCheckState CURRENT_CHECK_STATE;
detector/FinderPatternFinder.h:96:  static int MIN_SKIP;
detector/FinderPatternFinder.h:97:  static int MAX_MODULES;
detector/FinderPatternFinder.h:104:  static int _minModuleSize;
detector/AlignmentPatternFinder.h:41:  static int CENTER_QUORUM;
detector/AlignmentPatternFinder.h:42:  static int MIN_SKIP;
detector/AlignmentPatternFinder.h:43:  static int MAX_MODULES;
detector/AlignmentPatternFinder.cpp:525:static const double pi = 3.1415926535897932384626433832795029;
encoder/BitArrayWriter.h:34:  static const int bitsPerWord = std::numeric_limits<unsigned int>::digits;
ErrorCorrectionLevel.h:34:  static ErrorCorrectionLevel *FOR_BITS[];
ErrorCorrectionLevel.h:35:  static int N_LEVELS;
ErrorCorrectionLevel.h:37:  static ErrorCorrectionLevel L;
ErrorCorrectionLevel.h:38:  static ErrorCorrectionLevel M;
ErrorCorrectionLevel.h:39:  static ErrorCorrectionLevel Q;
ErrorCorrectionLevel.h:40:  static ErrorCorrectionLevel H;
FormatInformation.h:33:  static int FORMAT_INFO_MASK_QR;
FormatInformation.h:34:  static int FORMAT_INFO_DECODE_LOOKUP[][2];
FormatInformation.h:35:  static int N_FORMAT_INFO_DECODE_LOOKUPS;
FormatInformation.h:36:  static int BITS_SET_IN_HALF_BYTE[];
QRCodeWriter.h:36:   static const int NUM_MASK_PATTERNS = 8;
Version.h:73:  static unsigned int VERSION_DECODE_INFO[];
Version.h:74:  static int N_VERSION_DECODE_INFOS;
Version.h:75:  static std::vector<Ref<Version> > VERSIONS;
Version.h:78:  static  Ref<Version> MICRO_VERSION;
Version.h:80:  static const int MICRO_DEMITION = 19;
